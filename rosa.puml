@startuml rosa

' Resources
package Resources <<Rectangle>> {
  interface ResourceStream {
    +virtual bool open(const char* path)
    +virtual bool isOpen()
    +virtual int  getSize()
    +virtual int  read(void* buffer, int length)
    +virtual int  seek(int position)
    +virtual int  tell()
    +virtual void close()
  }

  class PhysFSStream implements ResourceStream {
    +bool open(const char* path)
    +bool isOpen()
    +int  getSize()
    +int  read(void* buffer, int length)
    +int  seek(int position)
    +int  tell()
    +void close()
  }

  class FilesystemStream implements ResourceStream {
    +bool open(const char* path)
    +bool isOpen()
    +int  getSize()
    +int  read(void* buffer, int length)
    +int  seek(int position)
    +int  tell()
    +void close()
  }

  enum ResourceType {
    resource_texture
    resource_sound
    resource_music
    resource_font
    resource_script
  }

  class Resource {
    +virtual bool loadFromStream()
    -m_name : std::string
    -m_uuid : uuid
    -m_type : ResourceType
  }

  class Texture implements Resource {
    +bool loadFromStream()
  }

  class Shader implements Resource {
    +bool loadFromStream()
  }

  class LuaScript implements Resource {
    +bool loadFromStream()
  }

  class AudioClip implements Resource {
    +bool loadFromStream()
    +int  streamFromStream(void* buffer, int length)
  }

  class VideoClip implements Resource {
    +bool loadFromStream()
    +int  streamFromStream(void* buffer, int length)
  }

  class ResourceManager {
    -unordered_map<uuid, Resource> m_resources
  }
}
 
ResourceType <- Resource
ResourceStream <-- Resource
Resource <-- ResourceManager

'Graphics
package Graphics <<Rectangle>> {
  interface Drawable {
    #virtual void draw(glm::mat4 projection)
  }

  class Sprite implements Drawable {
    #void draw(glm::mat4 projection)
    -Vertex m_vertices[4]
  }

  class RenderWindow {
    +void update()
    +void draw()
    +void display()
    +bool isOpen()
  }

  class Vertex {
    +glm::vec4 position
    +glm::vec4 texture_coords
    +Colour colour
  }
  class Colour {
    +uint8_t r
    +uint8_t g
    +uint8_t b
    +uint8_t a
  }

  Colour <-- Vertex
  Vertex <-- Sprite : m_vertices

  Drawable <-- RenderWindow #green;line.dashed;text:green

  Texture <-- Sprite
  Shader <-- Sprite
}

' Core
package Core <<Rectangle>> {
  class GameManager {
    +void run()
    -RenderWindow& m_render_window
    -unordered_map<uuid, Scene> m_scenes
  }

  class Scene {
    +void update()
    +void render()
  }

  class Logger {
    +void debug()
    +void info()
    +void warning()
    +void error()
    +void critical()
  }

  class Profiler

  RenderWindow <- GameManager
  Scene <-- GameManager
  Scene <-- Profiler #red;line.dashed;text:red
  ResourceManager <-- Scene #green;line.dashed;text:green
  Drawable <-- Scene #green;line.dashed;text:green
}

' Components
package Components <<Rectangle>> {
  class TransformComponent
  class SpriteComponent extends Graphics.Sprite
  class LuaScriptComponent
  class NativeScriptComponent
  class MusicPlayerComponent
  class SoundPlayerComponent

  AudioClip <-- MusicPlayerComponent
  AudioClip <-- SoundPlayerComponent
  LuaScript <-- LuaScriptComponent
  TransformComponent <-- Drawable
}

@enduml
